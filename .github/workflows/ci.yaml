name: CI

on: [ push, pull_request ]

defaults:
  run:
    shell: bash

jobs:
  build_linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch:   [ x86_64 ]
        cc:     [ clang, gcc ]
        config: [ debug ]

    env:
      PREMAKE_INSTALL_URL: https://github.com/premake/premake-core/releases/download/v5.0.0-beta7/premake-5.0.0-beta7-linux.tar.gz
      PREMAKE_OS:     linux_${{ matrix.arch }}
      PREMAKE_CONFIG: ${{ matrix.config == 'debug' && 'Debug' || 'Release' }}
      ARTIFACT_NAME:   pulsar-linux_${{ matrix.arch }}-${{ matrix.cc }}_${{ matrix.config }}
      ARTIFACT_UPLOAD: ${{ matrix.config == 'debug' && 'yes' || 'no' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install APT Dependencies
        run: |
          sudo apt-get update -q
          sudo apt-get install -q -y ${{ matrix.cc }} make tar wget
      - name: Install Premake and Generate Project Files
        run: |
          wget -O premake5.tar.gz ${{ env.PREMAKE_INSTALL_URL }}
          tar -xf ./premake5.tar.gz
          ./premake5 --arch=${{ matrix.arch }} --cc=${{ matrix.cc }} gmake
      - name: Build All ${{ env.PREMAKE_CONFIG }}
        run: |
          make -j config?=${{ matrix.config }} pulsar pulsar-lsp pulsar-tools
      - name: Prepare Artifact
        if: env.ARTIFACT_UPLOAD == 'yes'
        env:
          PREMAKE_BUILD: ${{ env.PREMAKE_OS }}/${{ env.PREMAKE_CONFIG }}
        run: |
          mkdir -p artifact/${{ env.ARTIFACT_NAME }}/
          cp    LICENSE.md                                               artifact/${{ env.ARTIFACT_NAME }}/
          cp -R resources/**                                             artifact/${{ env.ARTIFACT_NAME }}/
          cp    build/pulsar-lsp/${{ env.PREMAKE_BUILD }}/pulsar-lsp     artifact/${{ env.ARTIFACT_NAME }}/
          cp    build/pulsar-tools/${{ env.PREMAKE_BUILD }}/pulsar-tools artifact/${{ env.ARTIFACT_NAME }}/
      - name: Upload Artifact
        if: env.ARTIFACT_UPLOAD == 'yes'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: artifact
          if-no-files-found: error
